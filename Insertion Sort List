'''
采用直接排序法对链表进行排序
时间复杂度O(n2)，因为直接排序的时间复杂度为O(n2)
空间复杂度O(1),在原位置进行排序
pt指向要插入的位置，cur指向当前遍历的节点的前一个节点，这样是为了比较和交换方便
'''
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def insertionSortList(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        while head==None or head.next==None:
            return head      
        dummy = ListNode(0)
        dummy.next = head
        pt = dummy
        cur = pt.next
        while cur and cur.next!=None: #由于后面的cur.next = tmp置换，置换玩之后cur可能为None，因此要做限制
            #当前节点不空 且 要判断的节点不空 且 pt.next指向的节点值小于要判断的节点值 且 已排序的最有一个节点值大于要判断的节点值     
            while cur and cur.next!=None and pt.next.val<cur.next.val and cur.val>cur.next.val:
                pt = pt.next
            if cur.val>cur.next.val: #用该条件判断是否进行交换
                tmp = cur.next.next
                cur.next.next = pt.next
                pt.next = cur.next
                cur.next = tmp
            else: cur = cur.next #不交换时直接后移
            pt = dummy     
        return dummy.next
        
